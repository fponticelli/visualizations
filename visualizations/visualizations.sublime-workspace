{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ab",
				"abs( v : Float ) : Float"
			],
			[
				"ma",
				"max( a : Float , b : Float ) : Float"
			],
			[
				"w",
				"weight : Float"
			],
			[
				"we",
				"weight : Float"
			],
			[
				"rec",
				"reduce(...) : Unknown<2>"
			],
			[
				"floa",
				"floatMax(...) : Float"
			],
			[
				"availalbl",
				"availalble"
			],
			[
				"le",
				"level : Int"
			],
			[
				"sr",
				"src : rg.view.svg.chart.Node"
			],
			[
				"ds",
				"dst : rg.view.svg.chart.Node"
			],
			[
				"fal",
				"falloffweight : Float"
			],
			[
				"pare",
				"parents : Array<{ weight : Float, id : String }>"
			],
			[
				"pa",
				"parents : Array<{ weight : Float, id : String }>"
			],
			[
				"par",
				"parents : Array<{ weight : Float, id : String }>"
			],
			[
				"mi",
				"min( a : Float , b : Float ) : Float"
			],
			[
				"min",
				"min( a : Float , b : Float ) : Float"
			],
			[
				"0",
				"0"
			],
			[
				"co",
				"compare( a : Int , b : Int ) : Int"
			],
			[
				"get",
				"get(...) : DataPoint, children : Array<Unknown<0>> }>"
			],
			[
				"weight",
				"weight : Float"
			],
			[
				"so",
				"sort"
			],
			[
				"b",
				"isIterator() : Bool"
			],
			[
				"max",
				"max( a : Float , b : Float ) : Float"
			],
			[
				"su",
				"substr(...) : String"
			],
			[
				"str",
				"string( v : String ) : thx.js.Selection"
			],
			[
				"at",
				"attr(...) : Selection>"
			],
			[
				"a",
				"attr(...) : Selection>"
			],
			[
				"Hoo",
				"HookConnectorArea"
			],
			[
				"s",
				"svg"
			],
			[
				"view",
				"view"
			],
			[
				"m",
				"min( a : Float , b : Float ) : Float"
			],
			[
				"opt",
				"opt"
			],
			[
				"com",
				"compare( a : Float , b : Float ) : Int"
			],
			[
				"sort",
				"sort(...) : Void"
			],
			[
				"abs",
				"abs( v : Float ) : Float"
			],
			[
				"sub",
				"substr(...) : String"
			],
			[
				"attr",
				"attr(...) : Node>>"
			],
			[
				"dst",
				"dst : rg.view.svg.chart.Node"
			],
			[
				"f",
				"falloffweight : Float"
			],
			[
				"ch",
				"children : Array<Unknown<0>>"
			],
			[
				"Se",
				"Selection [class]"
			],
			[
				"js",
				"js"
			],
			[
				"id",
				"id : String"
			],
			[
				"projec",
				"projection(...) : Diagonal<Array<Float>>"
			],
			[
				"rem",
				"remove() : thx.js.Selection"
			],
			[
				"se",
				"selectAll(...) : thx.js.Selection"
			],
			[
				"att",
				"attr(...) : Selection>"
			],
			[
				"app",
				"append(...) : thx.js.Selection"
			],
			[
				"em",
				"empty() : Bool"
			],
			[
				"ed",
				"edges"
			],
			[
				"g",
				"g"
			],
			[
				"e",
				"each"
			],
			[
				"widget",
				"widget"
			],
			[
				"area",
				"area"
			],
			[
				"stri",
				"string"
			],
			[
				"strin",
				"string"
			],
			[
				"ap",
				"append"
			],
			[
				"di",
				"diagonal(...) : String"
			],
			[
				"for",
				"forArray() : Diagonal<Array<Float>>"
			],
			[
				"D",
				"Diagonal [class]"
			],
			[
				"pro",
				"projection(...) : Array<Float>"
			],
			[
				"diagonal",
				"diagonal"
			],
			[
				"container",
				"container"
			],
			[
				"src",
				"src : rg.view.svg.chart.Node"
			],
			[
				"en",
				"enter() : Node }>"
			],
			[
				"da",
				"data(...) : thx.js.DataChoice<data.T>"
			],
			[
				"sele",
				"selectAll(...) : thx.js.Selection"
			],
			[
				"an",
				"anchor : rg.view.svg.widget.GridAnchor"
			],
			[
				"te",
				"text : String"
			],
			[
				"La",
				"Label [class]"
			],
			[
				"wi",
				"widget"
			],
			[
				"sv",
				"svg"
			],
			[
				"hs",
				"Hash"
			],
			[
				"ea",
				"each(...) : Node>"
			],
			[
				"up",
				"update() : Node>"
			],
			[
				"len",
				"length : Int"
			],
			[
				"red",
				"reduce(...) : Unknown<2>"
			],
			[
				"ge",
				"get(...) : Null<rg.view.svg.chart.Node>"
			],
			[
				"pu",
				"push(...) : Int"
			],
			[
				"p",
				"pos : Int"
			],
			[
				"pos",
				"parents : Array<{ weight : Float, id : String }>"
			],
			[
				"map",
				"map(...) : Array<Unknown<1>>"
			],
			[
				"colors",
				"colors"
			],
			[
				"colorf",
				"colorf(...) : EnterSelection<{ weight : Float, src : String, dst : String }>"
			],
			[
				"stroke",
				"stroke"
			],
			[
				"style",
				"style(...) : EnterSelection<{ weight : Float, src : String, dst : String }>>"
			],
			[
				"push",
				"push( x : Array<Unknown<0>> ) : Int"
			],
			[
				"i",
				"id : String"
			],
			[
				"sh",
				"shift() : Null<String>"
			],
			[
				"l",
				"length : Int"
			],
			[
				"o",
				"order(...) : Array<String>"
			],
			[
				"ad",
				"add(...) : Array<Array<Unknown<0>>>"
			],
			[
				"chi",
				"children : Array<Unknown<0>>"
			],
			[
				"c",
				"children : Array<Unknown<0>>"
			],
			[
				"ke",
				"keys"
			],
			[
				"flo",
				"float(...) : EnterSelection<{ weight : Float, src : String, dst : String }>"
			],
			[
				"styl",
				"style(...) : EnterSelection<{ weight : Float, src : String, dst : String }>>"
			],
			[
				"floatf",
				"floatf(...) : UpdateSelection<{ weight : Float, src : String, dst : String }>"
			],
			[
				"node",
				"node"
			],
			[
				"data",
				"dataf(...) : TOut>"
			],
			[
				"n",
				"node() : js.HtmlDom"
			],
			[
				"u",
				"update() : Node>"
			],
			[
				"string",
				"string(...) : Node>"
			],
			[
				"fl",
				"float"
			],
			[
				"enter",
				"enter"
			],
			[
				"dataf",
				"dataf(...) : TOut>"
			],
			[
				"exit",
				"exit() : DataPoint, count : Int }>>"
			],
			[
				"remove",
				"remove"
			],
			[
				"exi",
				"exit"
			],
			[
				"selectAll",
				"selectAllData(...) : T>"
			],
			[
				"de",
				"debug"
			],
			[
				"he",
				"height : Int"
			],
			[
				"levelru",
				"levelrules"
			],
			[
				"ra",
				"range(...) : Array<Int>"
			],
			[
				"Ints",
				"variableIndependents"
			],
			[
				"re",
				"reduce(...) : Unknown<2>"
			],
			[
				"coun",
				"count"
			],
			[
				"count",
				"count"
			],
			[
				"field",
				"field(...) : Dynamic"
			],
			[
				"fi",
				"fields( o : Dynamic ) : Array<String>"
			],
			[
				"set",
				"set(...) : Void"
			],
			[
				"fie",
				"field(...) : Dynamic"
			],
			[
				"In",
				"InfoSankey [class]"
			],
			[
				"in",
				"info"
			],
			[
				"contr",
				"controller"
			],
			[
				"Data",
				"DataContext [class]"
			],
			[
				"Va",
				"VariableIndependent [class]"
			],
			[
				"Da",
				"DataPoint [class]"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Diagonal.hx",
			"settings":
			{
				"buffer_size": 1543,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Line.hx",
			"settings":
			{
				"buffer_size": 1415,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/css/rg.css",
			"settings":
			{
				"buffer_size": 9299,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bin/sankey.html",
			"settings":
			{
				"buffer_size": 1948,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Arc.hx",
			"settings":
			{
				"buffer_size": 3088,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/rg/view/svg/widget/ElbowArea.hx",
			"settings":
			{
				"buffer_size": 2154,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package rg.view.svg.chart;\nimport rg.view.svg.panel.Panel;\nimport rg.data.VariableDependent;\nimport rg.data.VariableIndependent;\nimport rg.data.DataPoint;\nimport thx.color.NamedColors;\nimport thx.js.Selection;\nimport rg.view.svg.widget.Label;\nimport rg.view.svg.widget.GridAnchor;\nimport rg.view.svg.widget.DiagonalArea;\nimport rg.view.svg.widget.ElbowArea;\nimport rg.view.svg.widget.HookConnectorArea;\nusing Arrays;\n\n// TODO wire labels\n\nclass Sankey extends Chart\n{\n	var layout : Array<Array<Node>>;\n	public var levelWidth : Int;\n	public var padding : Float;\n	public var maxFalloffWidth : Float;\n	public var padLines : Float;\n\n	var levels : Int;\n	var max : Float;\n	var availableheight : Float;\n	var map : Hash<Node>;\n	var edges : Array<{ src : Node, dst : Node, weight : Float }>;\n	var padBefore : Float;\n	var padAfter : Float;\n\n	public function new(panel : Panel)\n	{\n		super(panel);\n		addClass(\"sankey\");\n		levelWidth = 60;\n		padding = 60;\n		maxFalloffWidth = 40;\n		padLines = 4.0;\n	}\n\n	public function setVariables(variableIndependents : Array<VariableIndependent<Dynamic>>, variableDependents : Array<VariableDependent<Dynamic>>, data : Array<DataPoint>)\n	{\n\n	}\n\n	public function data(layout : Array<Array<Node>>)\n	{\n		this.layout = layout;\n		redraw();\n	}\n\n	function redraw()\n	{\n		levels = layout.length;\n		max = layout.floatMax(function(arr) return arr.reduce(function(v, c, _) return c.weight + v, 0)); //layout[0][0].weight;\n		map = new Hash();\n		edges = [];\n\n		// available height\n		availableheight = height - layout.floatMax(function(arr) return arr.length) * padding;\n\n		layout.each(function(level, lvl) {\n			level.each(function(n, pos) {\n				map.set(n.id, n);\n			});\n		});\n\n		layout.each(function(level, lvl) {\n			level.each(function(n, pos) {\n				for(child in n.children)\n					edges.push({\n						src : n,\n						dst : map.get(child.id),\n						weight : child.weight\n					});\n			});\n		});\n		edges.sort(function(a, b) {\n			return Floats.compare(a.weight, b.weight);\n		});\n\n		// correct max available height + max\n		for(edge in edges)\n		{\n			if(edge.src.level < edge.dst.level)\n				continue;\n			availableheight -= padLines;\n			max += edge.weight;\n		}\n\n		var yref = 0.0;\n		for(level in layout)\n		{\n			var t = 0.0;\n			for(node in level)\n			{\n				t += padding + nheight(node.weight);\n			}\n			if(t > yref)\n				yref = t;\n		}\n		yref += padLines;\n\n		// padding before\n		padBefore = 0.0;\n\n		for(node in layout[0])\n		{\n			var extrain = Math.min(nheight(node.extraweight), maxFalloffWidth);\n			if(node.parents.length > 0)\n			{\n				var parentWeight = hafter(node.parents[0].id, node.parents) + nheight(node.parents[0].weight);\n				if(parentWeight > extrain)\n					extrain = parentWeight;\n			}\n			if(extrain > padBefore)\n				padBefore = extrain;\n		}\n\n		padBefore += 2; // TODO border width\n\n		// padding after\n		padAfter = 0.0;\n\n		for(node in layout[layout.length-1])\n		{\n			var extrain = Math.min(nheight(node.falloffweight), maxFalloffWidth);\n			if(node.children.length > 0)\n			{\n				var childWeight = hafter(node.children[0].id, node.children) + nheight(node.children[0].weight) + nheight(node.falloffweight) + padLines;\n				if(childWeight > extrain)\n					extrain = childWeight;\n			}\n			if(extrain > padAfter)\n				padAfter = extrain;\n		}\n\n		padAfter += 2;\n\n		// draw\n\n		var edgescontainer = g.select(\"g.edges\");\n		if(edgescontainer.empty())\n			edgescontainer = g.append(\"svg:g\").attr(\"class\").string(\"edges\");\n		else\n			edgescontainer.selectAll(\"*\").remove();\n\n//		var yref = 540.0;\n\n		edges.each(function(edge, _) {\n			if(edge.dst.level > edge.src.level)\n				return;\n			var weight = nheight(edge.weight),\n				hook   = new HookConnectorArea(edgescontainer),\n				before = hafter(edge.dst.id, edge.src.children) + Math.min(maxFalloffWidth, nheight(edge.src.falloffweight)),\n				after  = hafter(edge.src.id, edge.dst.parents);\n\n			hook.update(\n				levelWidth / 2 + xlevel(edge.src.level),\n				ynode(edge.src) + ydiagonal(edge.dst.id, edge.src.children),\n//				ynode(edge.src) + hnode(edge.src) / 2,\n				- levelWidth / 2 + xlevel(edge.dst.level),\n				nheight(edge.dst.extraweight) + ynode(edge.dst) + ydiagonal(edge.src.id, edge.dst.parents),\n//				ynode(edge.dst) + hnode(edge.dst) / 2,\n//				weight,\n				weight,\n				yref,\n//				Math.max(nheight(edge.src.weight) + ynode(edge.src), nheight(edge.dst.weight) + ynode(edge.dst)) + 20,\n				before,\n				after\n			);\n			yref += weight + padLines;\n		});\n\n		edges.each(function(edge, _) {\n			if(edge.dst.level <= edge.src.level)\n				return;\n			var weight = edge.weight / max * availableheight,\n				diagonal = new DiagonalArea(edgescontainer);\n			diagonal.update(\n				levelWidth / 2 + xlevel(edge.src.level),\n				ynode(edge.src) + ydiagonal(edge.dst.id, edge.src.children),\n//				ynode(edge.src) + hnode(edge.src) / 2,\n				- levelWidth / 2 + xlevel(edge.dst.level),\n				nheight(edge.dst.extraweight) + ynode(edge.dst) + ydiagonal(edge.src.id, edge.dst.parents),\n//				ynode(edge.dst) + hnode(edge.dst) / 2,\n				weight,\n				weight\n			);\n		});\n\n		function normMin(v : Float) return Math.max(0, Math.min(v - 3, 5));\n\n		// fall-off\n		for(level in layout)\n		{\n			for(node in level)\n			{\n				if(node.falloffweight <= 0)\n					continue;\n				var elbow = new ElbowArea(edgescontainer),\n					falloff = nheight(node.falloffweight);\n				elbow.update(\n					RightBottom,\n					falloff,\n					levelWidth / 2 + xlevel(node.level),\n					ynode(node) + ydiagonal(null, node.children) + falloff,\n					normMin(falloff),  // minr\n					maxFalloffWidth, // max\n					0,  // before\n					5  // after\n				);\n			}\n		}\n\n		// extra-in\n		for(level in layout)\n		{\n			for(node in level)\n			{\n				if(node.extraweight <= 0)\n					continue;\n				var elbow = new ElbowArea(edgescontainer),\n					extra = nheight(node.extraweight);\n\n				elbow.update(\n					LeftTop,\n					extra,\n					- levelWidth / 2 + xlevel(node.level),\n					ynode(node), // + ydiagonal(null, node.children) + falloff\n					normMin(extra),  // minr\n					maxFalloffWidth, // max\n					0,  // before\n					5  // after\n				);\n			}\n		}\n\n		var rules = g.selectAll(\"g.level\").data(layout)\n			.enter()\n				.append(\"svg:g\").attr(\"class\").string(\"level\")\n/*				.append(\"svg:line\")\n					.attr(\"class\").stringf(function(_, i) return \"level level-\"+i)\n					.attr(\"x1\").float(0)\n					.attr(\"x2\").float(0)\n					.attr(\"y1\").float(0)\n					.attr(\"y2\").float(height)\n*/			.update()\n				.attr(\"transform\").stringf(function(_, i) {\n					return \"translate(\"+xlevel(i)+\",0)\";\n				})\n			.exit()\n				.remove();\n\n		var choice = rules.update()\n			.selectAll(\"g.node\").dataf(function(d : Array<Node>, _) return d);\n\n		var cont = choice\n			.enter()\n				.append(\"svg:g\").attr(\"class\").string(\"node\");\n\n		if(levelWidth > 0)\n		{\n			cont.append(\"svg:rect\")\n				.attr(\"class\").string(\"node\")\n				.attr(\"x\").float(-levelWidth / 2)\n				.attr(\"y\").float(0)\n				.attr(\"width\").float(levelWidth)\n				.attr(\"height\").floatf(hnode);\n\n			cont.append(\"svg:line\")\n				.attr(\"class\").string(\"node\")\n				.attr(\"x1\").float(-levelWidth / 2)\n				.attr(\"y1\").float(0)\n				.attr(\"x2\").float(levelWidth / 2)\n				.attr(\"y2\").float(0);\n\n			cont.append(\"svg:line\")\n				.attr(\"class\").string(\"node\")\n				.attr(\"x1\").float(-levelWidth / 2)\n				.attr(\"y1\").floatf(hnode)\n				.attr(\"x2\").float(levelWidth / 2)\n				.attr(\"y2\").floatf(hnode);\n		}\n\n		cont.each(function(dp, i) {\n			var node = Selection.current;\n			var label = new Label(node, true, true, false);\n			label.anchor = GridAnchor.Bottom;\n			label.text = dp.id;\n		});\n\n		choice.update().attr(\"transform\").stringf(function(n, i) {\n			return \"translate(0,\"+ynode(n, i)+\")\";\n		});\n\n// reference lines to remove\n\n		var lines = g.selectAll(\"g.reference\").data(edges)\n			.enter()\n				.append(\"svg:g\").attr(\"class\").string(\"reference\")\n				.append(\"svg:line\")\n					.style(\"stroke-opacity\").float(0.1)\n					.style(\"stroke\").colorf(function(d, _)\n						return\n							d.src.level == d.dst.level\n							? NamedColors.blue\n							: (d.src.level < d.dst.level\n								? NamedColors.green\n								: NamedColors.red ));\n		lines\n			.attr(\"x1\").floatf(function(o, _) {\n				return xlevel(o.src.level);\n			})\n			.attr(\"x2\").floatf(function(o, _) {\n				return xlevel(o.dst.level);\n			})\n			.attr(\"y1\").floatf(function(o, _) {\n				return ynode(o.src) + hnode(o.src) / 2;\n			})\n			.attr(\"y2\").floatf(function(o, _) {\n				return ynode(o.dst) + hnode(o.dst) / 2;\n			})\n			.style(\"stroke-width\").floatf(function(o, _) {\n				return nheight(o.weight);\n			})\n		;\n\n	}\n\n	function nheight(v : Float)\n	{\n		return v / max * availableheight;\n	}\n\n	function ydiagonal(id : String, edges : Array<{ id : String, weight : Float }>)\n	{\n		var weight = 0.0;\n		for(edge in edges)\n		{\n			if(edge.id == id)\n				break;\n			weight += edge.weight;\n		}\n		return nheight(weight);\n	}\n\n	function hafter(id : String, edges : Array<{ id : String, weight : Float }>)\n	{\n		var found = false,\n			pad = padLines / nheight(1),\n			weight = pad;\n		for(edge in edges)\n		{\n			if(!found)\n			{\n				if(edge.id == id)\n				//	continue;\n				found = true;\n				continue;\n			}\n			weight += edge.weight + pad;\n		}\n		return nheight(weight);\n	}\n\n	function xlevel(pos : Int, ?_)\n	{\n		return (width - padBefore - padAfter - levelWidth) / (levels - 1) * pos + (levelWidth / 2) + padBefore;\n	}\n\n	function ynode(node : Node, ?_)\n	{\n		var before = padding;\n		for(i in 0...node.pos)\n		{\n			before += hnode(layout[node.level][i]) + padding;\n		}\n		return before;\n	}\n\n	function hnode(node : Node, ?_)\n	{\n		return nheight(node.weight);\n	}\n}\n\ntypedef Node =\n{\n	dp : DataPoint,\n	id : String,\n	weight : Float,\n	extraweight : Float,\n	falloffweight : Float,\n	parents : Array<{ id : String, weight : Float }>,\n	children : Array<{ id : String, weight : Float }>,\n	level : Int,\n	pos : Int\n}",
			"file": "src/rg/view/svg/chart/Sankey.hx",
			"file_size": 9729,
			"file_write_time": 1323129956000000,
			"settings":
			{
				"buffer_size": 9649,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/rg/view/svg/widget/HookConnectorArea.hx",
			"settings":
			{
				"buffer_size": 3186,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/rg/controller/visualization/VisualizationSankey.hx",
			"settings":
			{
				"buffer_size": 3726,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/HaXe/Hxml.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"tr",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ter",
				"Preferences: Terminal Settings – Default"
			],
			[
				"clas",
				"Snippet: Class"
			],
			[
				"tre",
				"Set Syntax: Regular Expression"
			],
			[
				"re",
				"Set Syntax: Regular Expression"
			],
			[
				"tri",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"tra",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"tria",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"trai",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"insl",
				"Package Control: Install Package"
			],
			[
				"",
				"Set Syntax: HaXe2"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 310.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/VisualizationLineChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/widget/DiagonalArea.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/build.hxml",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/widget/Elbow.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/demo/snapengage/simple.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/demo/snapengage/bug.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/data/source/rgquery/transform/TransformIntersectTime.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/data/source/DataSourceReportGrid.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/layer/TickmarksOrtho.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/data/AxisTime.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/util/Periodicity.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/VisualizationSankey.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/VisualizationCartesian.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/data/source/rgquery/QueryParser.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/chart/Sankey.hx",
		"/Users/francoponticelli/Library/Application Support/Sublime Text 2/Packages/Terminal/Terminal.sublime-settings",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/widget/DiagonalArea",
		"/Users/francoponticelli/Projects/reportgrid/website/demo/css/demo.css",
		"/Users/francoponticelli/Projects/reportgrid/website/demo/geo-static.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/geo-static.html",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/js/src/v1/reportgrid-core.js",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/php/src/ReportGrid.php",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/php/test/test-all.php",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/php/test/basetest.php",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/php/test/test-track.php",
		"/Users/francoponticelli/Projects/reportgrid/client-libraries/php/test/test-query.php",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/interactive/Downloader.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/css/rg.css",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/sankey.html",
		"/Users/francoponticelli/Projects/reportgrid/website/demo/css/geo.css",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/RGConst.hx",
		"/Users/francoponticelli/Downloads/visualization-2.pdf",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoSankey.hx",
		"/Users/francoponticelli/Projects/thx/src/Iterators.hx",
		"/Users/francoponticelli/Projects/thx/src/Arrays.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/chart/PieChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/widget/Label.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/js/Selection.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/VisualizationBarChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/chart/BarChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/CHANGES.txt",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/version",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/track/ReportGridExecutor.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/track/DebugExecutor.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/testjs.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/Visualization.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/svg/chart/Geo.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/visualization/VisualizationGeo.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoPieChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoCartesianChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoBarChart.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/factory/FactorySvgVisualization.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoSankey",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/JSBridge.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/App.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/Visualizations.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/controller/info/InfoDownload.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/view/html/widget/DownloaderMenu.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/track/Tracker.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/src/rg/data/source/rgquery/ITrackReportGrid.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/bin/barchart-static.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations/visualizations.sublime-project",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/haxe/visualizations/src/rg/data/source/rgquery/QueryParser.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/haxe/visualizations/src/rg/controller/MVPOptions.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/haxe/visualizations/bin/js/reportgrid-core.js",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/haxe/visualizations/deploy.sh",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestTransformCount.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/DataProcessor.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/Variable.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/AxisOrdinal.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/bin/test.html",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/TestAxisGroupByTime.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/source/DataSourceReportGrid.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/TestRGDataSource.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/TestAll.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/TestQueryParser.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/TestDataProcessor.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/source/rgquery/QueryParser.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/ScaleDistribution.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/MockRGExecutor.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/controller/factory/TestFactoryVariableContexts.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/AxisOrdinalStats.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/data/AxisOrdinalFixedValues.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestCountTransform.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestCountTimeIntersectTransform.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestTransformIntersectTime.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestBase.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestCountTimeSeriesTransform.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/test/rg/data/source/rgquery/transform/TestTransformTimeSeries.hx",
		"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis/src/rg/view/svg/chart/FunnelChart.hx",
		"/Users/francoponticelli/Projects/thx/fix.pl",
		"/Users/francoponticelli/Projects/thx/src/thx/color/Colors.hx",
		"/Users/francoponticelli/Projects/thx/src/Ints.hx",
		"/usr/local/removetrailingspaces/rmts",
		"/Users/francoponticelli/Projects/thx/src/Enums.hx.done",
		"/Users/francoponticelli/Projects/thx/rmts",
		"/Users/francoponticelli/Projects/thx/.git/hooks/pre-commit",
		"/Users/francoponticelli/Library/Application Support/Sublime Text 2/Packages/HaXe/HaxeComplete.py",
		"/Users/francoponticelli/Projects/thx/src/thx/xml/NodeFormat.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/xml/NormalizeNewlineValueFormat.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/xml/NormalizeWhitespaceValueFormat.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/xml/ValueFormat.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/xml/XmlWriter.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/CustomValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/DateGranularityRangeValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/DateRangeValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/EmailValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/IncrementValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/OptionValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/PatternValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/RangeValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/SingleLineValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/StringLengthValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/UrlValidator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/validation/Validator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/Imports.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/MacroVersion.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/Message.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/Results.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/TypeFactory.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/TypeServiceLocator.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/util/Version.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/type/Rttis.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/translation/PluralForms.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/translation/EmptyTranslation.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/translation/DictionaryTranslation.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/translation/DBTranslation.hx",
		"/Users/francoponticelli/Projects/thx/src/thx/text/Paths.hx"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/Users/francoponticelli/Projects/reportgrid/visualizations/visualizations",
			"/Users/francoponticelli/Projects/reportgrid/visualizations/src/main/haxe/vis"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"maxFalloffWidth",
			"padLines",
			"padLine",
			"maxWidth",
			"16",
			"falloffweight",
			"parents",
			"sort",
			"iyr",
			"oyr",
			"iy2",
			"iy1",
			"oy2",
			"oy1",
			"inner",
			"outer",
			"trace",
			"limit",
			"edges",
			"conjr",
			"$end    = $periodicity == 'eternity' ?",
			"$start  = $periodicity == 'eternity' ?",
			"label",
			"height",
			"count",
			"where.push",
			"s.replace",
			"delete",
			"JSON",
			"anal",
			"addWhereCondition",
			"parseValue",
			"_PNAME",
			"TestAxisGroupByTime",
			"where",
			"\"clic",
			"length",
			"remove",
			"trace",
			"where",
			"Equality",
			"chainExecution",
			"chartopt",
			"onclick",
			"factoryDataSource",
			"__init",
			"this.execute",
			"Function",
			"$bind"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"parallelExecution"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Diagonal.hx",
					"settings":
					{
						"buffer_size": 1543,
						"regions":
						{
						},
						"selection":
						[
							[
								1110,
								1110
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Line.hx",
					"settings":
					{
						"buffer_size": 1415,
						"regions":
						{
						},
						"selection":
						[
							[
								923,
								923
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "bin/css/rg.css",
					"settings":
					{
						"buffer_size": 9299,
						"regions":
						{
						},
						"selection":
						[
							[
								9217,
								9217
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7943.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "bin/sankey.html",
					"settings":
					{
						"buffer_size": 1948,
						"regions":
						{
						},
						"selection":
						[
							[
								1891,
								1891
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 484.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/francoponticelli/Projects/thx/src/thx/svg/Arc.hx",
					"settings":
					{
						"buffer_size": 3088,
						"regions":
						{
						},
						"selection":
						[
							[
								907,
								907
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 374.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/rg/view/svg/widget/ElbowArea.hx",
					"settings":
					{
						"buffer_size": 2154,
						"regions":
						{
						},
						"selection":
						[
							[
								1155,
								1234
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"spell_check": true,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/rg/view/svg/chart/Sankey.hx",
					"settings":
					{
						"buffer_size": 9649,
						"regions":
						{
						},
						"selection":
						[
							[
								1466,
								1466
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 532.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/rg/view/svg/widget/HookConnectorArea.hx",
					"settings":
					{
						"buffer_size": 3186,
						"regions":
						{
						},
						"selection":
						[
							[
								2124,
								2124
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/rg/controller/visualization/VisualizationSankey.hx",
					"settings":
					{
						"buffer_size": 3726,
						"regions":
						{
						},
						"selection":
						[
							[
								1958,
								1958
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/HaXe/HaXe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 516.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 27.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 124.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"downloa",
				"visualizations/src/rg/controller/interactive/Downloader.hx"
			],
			[
				"labe",
				"visualizations/src/rg/view/svg/widget/Label.hx"
			],
			[
				"deb",
				"visualizations/src/rg/track/DebugExecutor.hx"
			],
			[
				"iterato",
				"thx/src/Iterators.hx"
			],
			[
				"arrays",
				"thx/src/Arrays.hx"
			],
			[
				"repor",
				"visualizations/src/rg/track/ReportGridExecutor.hx"
			],
			[
				"down",
				"visualizations/src/rg/controller/interactive/Downloader.hx"
			],
			[
				"itra",
				"src/rg/data/source/rgquery/ITrackReportGrid.hx"
			],
			[
				"track",
				"src/rg/track/Tracker.hx"
			],
			[
				"reportgri",
				"visualizations/src/rg/data/source/DataSourceReportGrid.hx"
			],
			[
				"downl",
				"visualizations/src/rg/controller/interactive/Downloader.hx"
			],
			[
				"downlo",
				"visualizations/src/rg/view/html/widget/DownloaderMenu.hx"
			],
			[
				"parser",
				"vis/test/rg/data/source/rgquery/TestQueryParser.hx"
			],
			[
				"testrg",
				"vis/test/rg/data/source/TestRGDataSource.hx"
			],
			[
				"testaxis",
				"vis/test/rg/data/TestAxisGroupByTime.hx"
			],
			[
				"axis",
				"vis/src/rg/data/AxisOrdinal.hx"
			],
			[
				"trstda",
				"vis/test/rg/data/TestDataProcessor.hx"
			],
			[
				"tra",
				"std/flash/geom/Transform.hx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"tr",
				"/Users/francoponticelli/Projects/reportgrid/test/account/account.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true
}
